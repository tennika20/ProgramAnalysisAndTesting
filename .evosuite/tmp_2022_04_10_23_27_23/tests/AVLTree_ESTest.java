/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 11 04:29:37 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(2894);
      aVLTree0.insert(2894);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree_Node0.height = (-1300);
      aVLTree_Node0.key = (-1300);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.insert((-1));
      aVLTree0.insert(0);
      aVLTree0.find(0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.getRoot();
      aVLTree0.height();
      aVLTree0.getBalance((AVLTree.Node) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-3115));
      aVLTree0.insert(1635);
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.insert(0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1569);
      aVLTree0.insert(1191);
      aVLTree0.insert(0);
      aVLTree0.find((-1727));
      aVLTree0.getRoot();
      // Undeclared exception!
      try { 
        aVLTree0.insert(1191);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.insert(1629);
      aVLTree0.insert((-3115));
      aVLTree0.insert(1);
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      aVLTree0.height();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.delete((-1));
      aVLTree0.delete((-1));
      aVLTree0.delete((-1));
      aVLTree0.insert((-1));
      aVLTree0.delete(2777);
      aVLTree0.find((-1));
      aVLTree0.find((-1));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.height();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1601));
      aVLTree0.delete(0);
      aVLTree0.insert((-802));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
      aVLTree0.find(0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1);
      aVLTree0.delete(0);
      aVLTree0.delete(1);
      aVLTree0.height();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.height();
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.getRoot();
      aVLTree0.getBalance((AVLTree.Node) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-3354));
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-1));
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.insert((-1));
      aVLTree0.getRoot();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(1541);
      aVLTree0.getRoot();
      aVLTree0.getRoot();
      aVLTree0.insert(1);
      aVLTree0.insert(0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.find(2926);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1155);
      aVLTree0.find(0);
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.delete(0);
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree0.insert(4283);
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.getBalance(aVLTree_Node0);
      // Undeclared exception!
      try { 
        aVLTree0.delete(int0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-1));
      aVLTree0.delete((-1));
      aVLTree0.delete((-1440));
      aVLTree0.insert((-1));
      aVLTree0.find(4);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.height();
      aVLTree0.delete((-1));
      aVLTree0.delete(0);
      aVLTree0.insert(0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1));
      aVLTree0.delete((-372));
      aVLTree0.insert(2506);
      aVLTree0.insert(0);
      aVLTree0.find(0);
      aVLTree0.height();
      aVLTree0.delete(0);
      aVLTree0.delete(1389);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(2894);
      aVLTree0.insert(2894);
      aVLTree0.delete((-252));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree_Node0.key = (-1300);
      aVLTree_Node0.height = (-252);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.insert((-1));
      aVLTree0.insert(0);
      aVLTree0.getRoot();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.insert(1629);
      aVLTree0.insert((-3115));
      aVLTree0.insert(1);
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      aVLTree0.height();
      aVLTree0.getRoot();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1));
      aVLTree0.delete((-1));
      aVLTree0.delete((-1));
      aVLTree0.delete((-2676));
      aVLTree0.insert(936);
      aVLTree0.insert(724);
      aVLTree0.insert((-5402));
      aVLTree0.insert((-4522));
      aVLTree0.insert((-1));
      aVLTree0.delete(936);
      aVLTree0.height();
      aVLTree0.find((-1));
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree_Node0.key = 2;
      aVLTree0.height();
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree0.delete((-2577));
      aVLTree0.delete(2);
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree_Node0.key = 2502;
      aVLTree0.height();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.insert(217);
      aVLTree0.insert((-2238));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 1560;
      aVLTree0.insert(1560);
      aVLTree0.insert(0);
      int int1 = 0;
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      int int2 = aVLTree0.height();
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree0.insert(int2);
      int int3 = 0;
      aVLTree_Node0.key = int3;
      aVLTree0.delete(int1);
      aVLTree0.height();
      aVLTree0.insert(int0);
      int int4 = 0;
      aVLTree_Node1.right = aVLTree_Node0.left;
      aVLTree0.insert(int4);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
      aVLTree0.find(int3);
      aVLTree0.insert(int3);
      aVLTree0.getBalance(aVLTree_Node0);
      int int5 = (-2798);
      aVLTree0.find(int5);
      aVLTree0.getRoot();
      int int6 = 1271;
      aVLTree0.insert(int6);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.insert(1697);
      aVLTree0.insert((-1));
      aVLTree0.insert(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.insert((-678));
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      aVLTree0.delete((-1));
      aVLTree0.delete((-1));
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.left;
      aVLTree0.insert((-1333));
      aVLTree_Node0.left = null;
      aVLTree0.delete(1335);
      aVLTree0.getRoot();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.delete(0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      int int0 = (-1);
      aVLTree0.insert((-1));
      aVLTree0.insert(1);
      aVLTree0.insert((-4290));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree0.find((-4290));
      aVLTree_Node1.right = aVLTree_Node0;
      aVLTree_Node1.height = 1;
      aVLTree_Node0.key = 0;
      aVLTree_Node1.key = 0;
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.delete((-1));
      int int1 = 0;
      aVLTree0.find(0);
      aVLTree0.height();
      // Undeclared exception!
      aVLTree0.find((-1));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(2154);
      aVLTree0.find(1);
      aVLTree0.height();
      aVLTree0.insert(1693);
      aVLTree0.find(1);
      aVLTree0.getRoot();
      // Undeclared exception!
      try { 
        aVLTree0.delete(2154);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-2020));
      aVLTree0.height();
      aVLTree0.insert(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-2020));
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.right;
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree_Node1.left = aVLTree_Node0;
      aVLTree_Node1.height = 0;
      aVLTree_Node1.left.height = (-1567);
      aVLTree0.getBalance(aVLTree_Node1);
      aVLTree_Node0.right.height = (-1567);
      aVLTree_Node0.key = (-2020);
      aVLTree_Node0.height = 0;
      int int0 = aVLTree0.getBalance(aVLTree_Node1.left);
      aVLTree0.insert(int0);
      aVLTree_Node1.key = int0;
      int int1 = (-1097);
      int int2 = (-2597);
      aVLTree_Node0.key = int2;
      aVLTree0.delete(int1);
      aVLTree0.delete(int1);
      int int3 = 997;
      aVLTree0.delete(int3);
      aVLTree0.insert(int1);
      aVLTree0.getRoot();
      aVLTree0.getRoot();
      aVLTree0.getBalance(aVLTree_Node0.right);
      aVLTree0.getRoot();
      aVLTree0.getRoot();
      int int4 = 2619;
      aVLTree0.delete(int4);
      aVLTree0.getBalance(aVLTree_Node0.right);
      int int5 = 576;
      aVLTree0.delete(int5);
  }
}
